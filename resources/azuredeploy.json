{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "name": {
      "type": "string"
    },
    "env": {
      "type": "string",
      "defaultValue": "dev",
      "allowedValues": [
        "dev",
        "test",
        "prod"
      ]
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]"
    },
    "locationCode": {
      "type": "string",
      "defaultValue": "krc"
    },
    "cosmosDbDefaultConsistencyLevel": {
      "type": "string",
      "defaultValue": "Session"
    },
    "cosmosDbPrimaryRegion": {
      "type": "string",
      "defaultValue": "Korea Central"
    },
    "cosmosDbAutomaticFailover": {
      "type": "bool",
      "defaultValue": true
    },
    "cosmosDbName": {
      "type": "string"
    },
    "cosmosDbContainerName": {
      "type": "string"
    },
    "cosmosDbPartitionKeyPath": {
      "type": "string"
    },
    "storageAccountSku": {
      "type": "string",
      "defaultValue": "Standard_LRS"
    },
    "functionAppWorkerRuntime": {
      "type": "string",
      "defaultValue": "dotnet"
    },
    "functionAppEnvironment": {
      "type": "string",
      "defaultValue": "Development",
      "allowedValues": [
        "Development",
        "Staging",
        "Production"
      ]
    },
    "functionAppTimezone": {
      "type": "string",
      "defaultValue": "Korea Standard Time"
    }
  },
  "functions": [],
  "variables": {
    "metadata": {
      "longName": "[format('{{0}}-{0}-{1}-{2}', parameters('name'), parameters('env'), parameters('locationCode'))]",
      "shortName": "[format('{{0}}{0}{1}{2}', parameters('name'), parameters('env'), parameters('locationCode'))]"
    },
    "cosmosDb": {
      "name": "[format(variables('metadata').longName, 'cosdba')]",
      "location": "[parameters('location')]",
      "enableAutomaticFailover": "[parameters('cosmosDbAutomaticFailover')]",
      "consistencyPolicy": {
        "defaultConsistencyLevel": "[parameters('cosmosDbDefaultConsistencyLevel')]"
      },
      "region": {
        "primary": "[parameters('cosmosDbPrimaryRegion')]"
      },
      "dbName": "[parameters('cosmosDbName')]",
      "containerName": "[parameters('cosmosDbContainerName')]",
      "partitionKeyPath": "[parameters('cosmosDbPartitionKeyPath')]"
    },
    "storage": {
      "name": "[format(variables('metadata').shortName, 'st')]",
      "location": "[parameters('location')]",
      "sku": "[parameters('storageAccountSku')]"
    },
    "appInsights": {
      "name": "[format(variables('metadata').longName, 'appins')]",
      "location": "[parameters('location')]"
    },
    "servicePlan": {
      "name": "[format(variables('metadata').longName, 'csplan')]",
      "location": "[parameters('location')]"
    },
    "functionApp": {
      "name": "[format(variables('metadata').longName, 'fncapp')]",
      "location": "[parameters('location')]",
      "environment": "[parameters('functionAppEnvironment')]",
      "runtime": "[parameters('functionAppWorkerRuntime')]",
      "timezone": "[parameters('functionAppTimezone')]"
    }
  },
  "resources": [
    {
      "type": "Microsoft.DocumentDB/databaseAccounts",
      "apiVersion": "2020-06-01-preview",
      "name": "[variables('cosmosDb').name]",
      "location": "[variables('cosmosDb').location]",
      "kind": "GlobalDocumentDB",
      "tags": {
        "defaultExperience": "Core (SQL)",
        "CosmosAccountType": "Non-Production"
      },
      "properties": {
        "databaseAccountOfferType": "Standard",
        "enableAutomaticFailover": "[variables('cosmosDb').enableAutomaticFailover]",
        "consistencyPolicy": {
          "defaultConsistencyLevel": "[variables('cosmosDb').consistencyPolicy.defaultConsistencyLevel]",
          "maxIntervalInSeconds": 5,
          "maxStalenessPrefix": 100
        },
        "locations": [
          {
            "locationName": "[variables('cosmosDb').region.primary]",
            "failoverPriority": 0,
            "isZoneRedundant": false
          }
        ],
        "capabilities": [
          {
            "name": "EnableServerless"
          }
        ],
        "backupPolicy": {
          "type": "Periodic",
          "periodicModeProperties": {
            "backupIntervalInMinutes": 240,
            "backupRetentionIntervalInHours": 8
          }
        }
      }
    },
    {
      "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases",
      "apiVersion": "2020-06-01-preview",
      "name": "[format('{0}/{1}', variables('cosmosDb').name, variables('cosmosDb').dbName)]",
      "location": "[variables('cosmosDb').location]",
      "properties": {
        "resource": {
          "id": "[variables('cosmosDb').dbName]"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cosmosDb').name)]"
      ]
    },
    {
      "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
      "apiVersion": "2020-06-01-preview",
      "name": "[format('{0}/{1}', format('{0}/{1}', variables('cosmosDb').name, variables('cosmosDb').dbName), variables('cosmosDb').containerName)]",
      "location": "[variables('cosmosDb').location]",
      "properties": {
        "resource": {
          "id": "[variables('cosmosDb').containerName]",
          "partitionKey": {
            "kind": "Hash",
            "paths": [
              "[variables('cosmosDb').partitionKeyPath]"
            ]
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', split(format('{0}/{1}', variables('cosmosDb').name, variables('cosmosDb').dbName), '/')[0], split(format('{0}/{1}', variables('cosmosDb').name, variables('cosmosDb').dbName), '/')[1])]"
      ]
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2019-06-01",
      "name": "[variables('storage').name]",
      "location": "[variables('storage').location]",
      "kind": "StorageV2",
      "sku": {
        "name": "[variables('storage').sku]"
      },
      "properties": {
        "supportsHttpsTrafficOnly": true
      }
    },
    {
      "type": "Microsoft.Insights/components",
      "apiVersion": "2020-02-02-preview",
      "name": "[variables('appInsights').name]",
      "location": "[variables('appInsights').location]",
      "kind": "web",
      "properties": {
        "Application_Type": "web",
        "Request_Source": "IbizaWebAppExtensionCreate"
      }
    },
    {
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2019-08-01",
      "name": "[variables('servicePlan').name]",
      "location": "[variables('servicePlan').location]",
      "sku": {
        "name": "Y1",
        "tier": "Dynamic"
      },
      "properties": {
        "name": "[variables('servicePlan').name]",
        "computeMode": "Dynamic"
      }
    },
    {
      "type": "Microsoft.Web/sites",
      "apiVersion": "2019-08-01",
      "name": "[variables('functionApp').name]",
      "location": "[variables('functionApp').location]",
      "kind": "functionapp",
      "properties": {
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('servicePlan').name)]",
        "httpsOnly": true,
        "alwaysOn": true,
        "siteConfig": {
          "appSettings": [
            {
              "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
              "value": "[format('{0}', reference(resourceId('Microsoft.Insights/components', variables('appInsights').name), '2018-05-01-preview', 'Full').properties.InstrumentationKey)]"
            },
            {
              "name": "APPLICATIONINSIGHTS_CONNECTION_STRING",
              "value": "[format('{0}', reference(resourceId('Microsoft.Insights/components', variables('appInsights').name), '2018-05-01-preview', 'Full').properties.connectionString)]"
            },
            {
              "name": "AZURE_FUNCTIONS_ENVIRONMENT",
              "value": "[variables('functionApp').environment]"
            },
            {
              "name": "AzureWebJobsStorage",
              "value": "[format('DefaultEndpointsProtocol=https;AccountName={0};EndpointSuffix={1};AccountKey={2}', variables('storage').name, environment().suffixes.storage, listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storage').name), '2019-06-01').keys[0].value)]"
            },
            {
              "name": "FUNCTIONS_EXTENSION_VERSION",
              "value": "~3"
            },
            {
              "name": "FUNCTION_APP_EDIT_MODE",
              "value": "readonly"
            },
            {
              "name": "FUNCTIONS_WORKER_RUNTIME",
              "value": "[variables('functionApp').runtime]"
            },
            {
              "name": "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING",
              "value": "[format('DefaultEndpointsProtocol=https;AccountName={0};EndpointSuffix={1};AccountKey={2}', variables('storage').name, environment().suffixes.storage, listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storage').name), '2019-06-01').keys[0].value)]"
            },
            {
              "name": "WEBSITE_CONTENTSHARE",
              "value": "[variables('functionApp').name]"
            },
            {
              "name": "WEBSITE_NODE_DEFAULT_VERSION",
              "value": "~10"
            },
            {
              "name": "WEBSITE_TIME_ZONE",
              "value": "[variables('functionApp').timezone]"
            },
            {
              "name": "CosmosDBConnection",
              "value": "[format('AccountEndpoint=https://{0}.documents.azure.com:443/;AccountKey={1};', variables('cosmosDb').name, listKeys(resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cosmosDb').name), '2020-06-01-preview').primaryMasterKey)]"
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Insights/components', variables('appInsights').name)]",
        "[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cosmosDb').name)]",
        "[resourceId('Microsoft.Web/serverfarms', variables('servicePlan').name)]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storage').name)]"
      ]
    }
  ],
  "outputs": {}
}