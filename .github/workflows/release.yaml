name: Build, Test & Deploy

on:
  push:
    branches:
    - release/*

env:
  FUNCTIONAPP_PATH: 'src/DevRelKr.UrlShortener.FunctionApp'

jobs:
  arm_template_build_test_deploy_dev:
    name: 'DEV: ARM Templates Build, Test & Deploy'

    runs-on: ubuntu-latest

    steps:
    - name: Checkout the repo
      uses: actions/checkout@v2

    - name: Login to Azure
      uses: Azure/login@v1.1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS_DEV }}

    - name: Run Bicep build
      uses: aliencube/bicep-build-actions@v0.1
      with:
        files: '**/*.bicep'

    - name: Run ARM TTK
      uses: aliencube/arm-ttk-actions@v0.3
      id: armtest
      with:
        path: ./resources

    - name: Show ARM TTK test result
      shell: bash
      continue-on-error: true
      run: |
        echo 'Results: ${{ toJSON(fromJSON(steps.armtest.outputs.results)) }}'

    - name: Deploy ARM templates
      uses: Azure/arm-deploy@v1.0.1
      with:
        subscriptionId: ${{ secrets.SUBSCRIPTION_ID_DEV }}
        resourceGroupName: ${{ secrets.RESOURCE_GROUP_NAME_DEV }}
        deploymentName: 'dvrl.kr'
        template: 'resources/azuredeploy.json'
        parameters: name=${{ secrets.RESOURCE_NAME }} env=${{ secrets.RESOURCE_ENVIRONMENT_DEV }} cosmosDbName=${{ secrets.RESOURCE_COSMOSDB_DATABASE_NAME }} cosmosDbContainerName=${{ secrets.RESOURCE_COSMOSDB_CONTAINER_NAME }} cosmosDbPartitionKeyPath=${{ secrets.RESOURCE_COSMOSDB_PARTITION_KEY_PATH }} functionAppEnvironment=${{ secrets.RESOURCE_FUNCTIONAPP_ENVIRONMENT_DEV }} functionAppCustomDomain=${{ secrets.RESOURCE_FUNCTIONAPP_CUSTOM_DOMAIN_DEV }} dvrlDefaultRedirectUrl=${{ secrets.DVRL_DEFAULT_REDIRECT_URL }} dvrlGoogleAnalyticsCode=${{ secrets.DVRL_GOOGLE_ANALYTICS_CODE_DEV }}

  arm_template_build_test_deploy_prod:
    name: 'PROD: ARM Templates Build, Test & Deploy'
    needs:
    - arm_template_build_test_deploy_dev

    runs-on: ubuntu-latest

    steps:
    - name: Checkout the repo
      uses: actions/checkout@v2

    - name: Login to Azure
      uses: Azure/login@v1.1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS_PROD }}

    - name: Run Bicep build
      uses: aliencube/bicep-build-actions@v0.1
      with:
        files: '**/*.bicep'

    - name: Run ARM TTK
      uses: aliencube/arm-ttk-actions@v0.3
      id: armtest
      with:
        path: ./resources

    - name: Show ARM TTK test result
      shell: bash
      continue-on-error: true
      run: |
        echo 'Results: ${{ toJSON(fromJSON(steps.armtest.outputs.results)) }}'

    - name: Deploy ARM templates
      uses: Azure/arm-deploy@v1.0.1
      with:
        subscriptionId: ${{ secrets.SUBSCRIPTION_ID_PROD }}
        resourceGroupName: ${{ secrets.RESOURCE_GROUP_NAME_PROD }}
        deploymentName: 'dvrl.kr'
        template: 'resources/azuredeploy.json'
        parameters: name=${{ secrets.RESOURCE_NAME }} env=${{ secrets.RESOURCE_ENVIRONMENT_PROD }} cosmosDbName=${{ secrets.RESOURCE_COSMOSDB_DATABASE_NAME }} cosmosDbContainerName=${{ secrets.RESOURCE_COSMOSDB_CONTAINER_NAME }} cosmosDbPartitionKeyPath=${{ secrets.RESOURCE_COSMOSDB_PARTITION_KEY_PATH }} functionAppEnvironment=${{ secrets.RESOURCE_FUNCTIONAPP_ENVIRONMENT_PROD }} functionAppCustomDomain=${{ secrets.RESOURCE_FUNCTIONAPP_CUSTOM_DOMAIN_PROD }} dvrlDefaultRedirectUrl=${{ secrets.DVRL_DEFAULT_REDIRECT_URL }} dvrlGoogleAnalyticsCode=${{ secrets.DVRL_GOOGLE_ANALYTICS_CODE_PROD }}

  functionapp_build_test_deploy_dev:
    name: 'DEV: FunctionApp Build, Test & Deploy'
    needs:
    - arm_template_build_test_deploy_dev

    runs-on: ubuntu-latest

    steps:
    - name: Checkout the repo
      uses: actions/checkout@v2

    - name: Login to Azure
      uses: Azure/login@v1.1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS_DEV }}

    - name: Setup .NET Core SDK
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '3.1.x'

    - name: Restore NuGet packages
      shell: bash
      run: |
        dotnet restore .

    - name: Build solution
      shell: bash
      run: |
        dotnet build . -c Release

    - name: Test solution
      shell: bash
      run: |
        dotnet test . -c Release

    - name: Create FunctionApp artifact
      shell: bash
      run: |
        dotnet publish ${{ env.FUNCTIONAPP_PATH }} -c Release -o published

    - name: Get FunctionApp publish profile
      id: publishprofile
      uses: aliencube/publish-profile-actions@v1
      env:
        AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS_DEV }}
      with:
        resourceGroupName: ${{ secrets.RESOURCE_GROUP_NAME_DEV }}
        appName: ${{ secrets.RESOURCE_FUNCTIONAPP_NAME_DEV }}

    - name: Deploy FunctionApp
      uses: Azure/functions-action@v1
      with:
        app-name: ${{ secrets.RESOURCE_FUNCTIONAPP_NAME_DEV }}
        package: published
        publish-profile: ${{ steps.publishprofile.outputs.profile }}

    - name: Reset FunctionApp publish profile
      uses: aliencube/publish-profile-actions@v1
      env:
        AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS_DEV }}
      with:
        resourceGroupName: ${{ secrets.RESOURCE_GROUP_NAME_DEV }}
        appName: ${{ secrets.RESOURCE_FUNCTIONAPP_NAME_DEV }}
        reset: true

  functionapp_build_test_deploy_prod:
    name: 'PROD: FunctionApp Build, Test & Deploy'
    needs:
    - arm_template_build_test_deploy_prod
    - functionapp_build_test_deploy_dev

    runs-on: ubuntu-latest

    steps:
    - name: Checkout the repo
      uses: actions/checkout@v2

    - name: Login to Azure
      uses: Azure/login@v1.1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS_PROD }}

    - name: Setup .NET Core SDK
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '3.1.x'

    - name: Restore NuGet packages
      shell: bash
      run: |
        dotnet restore .

    - name: Build solution
      shell: bash
      run: |
        dotnet build . -c Release

    - name: Test solution
      shell: bash
      run: |
        dotnet test . -c Release

    - name: Create FunctionApp artifact
      shell: bash
      run: |
        dotnet publish ${{ env.FUNCTIONAPP_PATH }} -c Release -o published

    - name: Get FunctionApp publish profile
      id: publishprofile
      uses: aliencube/publish-profile-actions@v1
      env:
        AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS_PROD }}
      with:
        resourceGroupName: ${{ secrets.RESOURCE_GROUP_NAME_PROD }}
        appName: ${{ secrets.RESOURCE_FUNCTIONAPP_NAME_PROD }}

    - name: Deploy FunctionApp
      uses: Azure/functions-action@v1
      with:
        app-name: ${{ secrets.RESOURCE_FUNCTIONAPP_NAME_PROD }}
        package: published
        publish-profile: ${{ steps.publishprofile.outputs.profile }}

    - name: Reset FunctionApp publish profile
      uses: aliencube/publish-profile-actions@v1
      env:
        AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS_PROD }}
      with:
        resourceGroupName: ${{ secrets.RESOURCE_GROUP_NAME_PROD }}
        appName: ${{ secrets.RESOURCE_FUNCTIONAPP_NAME_PROD }}
        reset: true

  update_dns_and_ssl_certificate:
    name: 'PROD: Update DNS and SSL Certificate'
    needs:
    - functionapp_build_test_deploy_prod

    runs-on: ubuntu-latest

    steps:
    - name: Checkout the repo
      uses: actions/checkout@v2

    - name: Install Azure PowerShell
      shell: pwsh
      run: |
        Install-Module -Name Az -RequiredVersion ((Find-Module -Name Az)[0].Version) -AllowClobber -Scope CurrentUser -Force

    - name: Update A record
      id: arecord
      shell: pwsh
      env:
        AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS_PROD }}
      run: |
        $updated = scripts/Update-AzDnsARecord.ps1 -AppResourceGroupName ${{ secrets.RESOURCE_GROUP_NAME_PROD }} -AppName ${{ secrets.RESOURCE_FUNCTIONAPP_NAME_PROD }} -ZoneResourceGroupName ${{ secrets.RESOURCE_GROUP_NAME_ZONE }} -ZoneName ${{ secrets.RESOURCE_NAME_ZONE }} -UseLogin $true
        Write-Output "::set-output name=updated::$updated"

    - name: Update SSL Certificate
      if: steps.arecord.outputs.updated == 'true'
      shell: pwsh
      run: |
        scripts/Update-AzSslCertificate.ps1 -ApiEndpoint ${{ secrets.SSL_RENEW_ENDPOINT }} -DnsNames ${{ secrets.SSL_DNS_NAMES }}
