name: Build, Test & Deploy

on:
  push:
    branches-ignore:
    - main

env:
  FUNCTIONAPP_PATH: 'src/DevRelKr.UrlShortener.FunctionApp'

jobs:
  arm_template_build_test_deploy_dev:
    name: 'DEV: ARM Templates Build, Test & Deploy'

    runs-on: ubuntu-latest

    env:
      TENANT_ID: ''
      SUBSCRIPTION_ID: ''
      CLIENT_ID: ''
      CLIENT_SECRET: ''

    steps:
    - name: Checkout the repo
      uses: actions/checkout@v2

    - name: Login to Azure
      uses: Azure/login@v1.1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Convert Azure credentials
      shell: bash
      run: |
        tenantId=$(echo ${{ secrets.AZURE_CREDENTIALS }} | jq -r '.tenantId')
        subscriptionId=$(echo ${{ secrets.AZURE_CREDENTIALS }} | jq -r '.subscriptionId')
        clientId=$(echo ${{ secrets.AZURE_CREDENTIALS }} | jq -r '.clientId')
        clientSecret=$(echo ${{ secrets.AZURE_CREDENTIALS }} | jq -r '.clientSecret')

        echo "::set-env name=TENANT_ID::'$tenantId'"
        echo "::set-env name=SUBSCRIPTION_ID::'$subscriptionId'"
        echo "::set-env name=CLIENT_ID::'$clientId'"
        echo "::set-env name=CLIENT_SECRET::'$clientSecret'"

    - name: Run Bicep build
      uses: aliencube/bicep-build-actions@v0.1
      with:
        files: '**/*.bicep'

    - name: Run ARM TTK
      uses: aliencube/arm-ttk-actions@v0.3
      id: armtest
      with:
        path: ./resources

    - name: Show ARM TTK test result
      shell: bash
      continue-on-error: true
      run: |
        echo 'Results: ${{ toJSON(fromJSON(steps.armtest.outputs.results)) }}'

    - name: Deploy ARM templates
      uses: Azure/arm-deploy@v1.0.1
      with:
        subscriptionId: ${{ env.SUBSCRIPTION_ID }}
        resourceGroupName: ${{ secrets.RESOURCE_GROUP_NAME_DEV }}
        deploymentName: 'dvrl.kr'
        template: 'resources/azuredeploy.json'
        parameters: name=${{ secrets.RESOURCE_NAME }} env=${{ secrets.RESOURCE_ENVIRONMENT_DEV }} servicePrincipalClientId=${{ env.CLIENT_ID }} servicePrincipalClientSecret=${{ env.CLIENT_SECRET }} cosmosDbName=${{ secrets.RESOURCE_COSMOSDB_DATABASE_NAME }} cosmosDbContainerName=${{ secrets.RESOURCE_COSMOSDB_CONTAINER_NAME }} cosmosDbPartitionKeyPath=${{ secrets.RESOURCE_COSMOSDB_PARTITION_KEY_PATH }} functionAppEnvironment=${{ secrets.RESOURCE_FUNCTIONAPP_ENVIRONMENT_DEV }} functionAppCustomDomain=${{ secrets.RESOURCE_FUNCTIONAPP_CUSTOM_DOMAIN_DEV }}

  functionapp_build_test_deploy_dev:
    name: 'DEV: FunctionApp Build, Test & Deploy'
    needs:
    - arm_template_build_test_deploy_dev

    runs-on: ubuntu-latest

    steps:
    - name: Checkout the repo
      uses: actions/checkout@v2

    - name: Login to Azure
      uses: Azure/login@v1.1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Setup .NET Core SDK
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '3.1.x'

    - name: Restore NuGet packages
      shell: bash
      run: |
        dotnet restore .

    - name: Build solution
      shell: bash
      run: |
        dotnet build . -c Release

    - name: Test solution
      shell: bash
      run: |
        dotnet test . -c Release

    - name: Create FunctionApp artifact
      shell: bash
      run: |
        dotnet publish ${{ env.FUNCTIONAPP_PATH }} -c Release -o published

    # - name: Get FunctionApp publish profile
    #   id: publishprofile
    #   uses: aliencube/publish-profile-actions@v1.0.1
    #   env:
    #     AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
    #   with:
    #     resourceGroupName: ${{ secrets.RESOURCE_GROUP_NAME_DEV }}
    #     appName: ${{ secrets.RESOURCE_FUNCTIONAPP_NAME_DEV }}
    #     isFunctionApp: true

    # - name: Get FunctionApp publish profile
    #   id: publishprofile
    #   shell: bash
    #   run: |
    #     profile=$(az functionapp deployment list-publishing-profiles -g ${{ secrets.RESOURCE_GROUP_NAME_DEV }} -n ${{ secrets.RESOURCE_FUNCTIONAPP_NAME_DEV }} --xml --output tsv)
    #     echo "::set-output name=profile::$profile"

    - name: Deploy FunctionApp
      uses: Azure/functions-action@v1
      with:
        app-name: ${{ secrets.RESOURCE_FUNCTIONAPP_NAME_DEV }}
        package: published
        publish-profile: ${{ secrets.RESOURCE_FUNCTIONAPP_PUBLISH_PROFILE_DEV }}

    - name: Update FunctionApp settings
      uses: Azure/appservice-settings@v1
      with:
        app-name: ${{ secrets.RESOURCE_FUNCTIONAPP_NAME_DEV }}
        app-settings-json: '${{ secrets.RESOURCE_FUNCTIONAPP_SETTINGS_DEV }}'
